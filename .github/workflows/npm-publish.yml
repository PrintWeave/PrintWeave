name: Lerna Fixed Version Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'packages/**'
      - 'package.json'
      - 'lerna.json'

permissions:
  contents: write
  packages: write

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g lerna

      - name: Build packages
        run: npm run build

      - name: Check for version changes
        id: check-versions
        run: |
          # Get version from lerna.json
          CURRENT_VERSION=$(node -p "require('./lerna.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Create a temporary file to store the result
          echo "false" > needs_publish.txt
          
          # Get all package names and check their versions
          while IFS= read -r package; do
            PKG_NAME=$(echo $package | jq -r '.name')
            
            # Get published version from npm
            PUBLISHED_VERSION=$(npm view $PKG_NAME version 2>/dev/null || echo "0.0.0")
            echo "Package $PKG_NAME - Published: $PUBLISHED_VERSION, Current: $CURRENT_VERSION"
            
            # Compare versions using node semver
            IS_NEWER=$(node -p "require('semver').gt('$CURRENT_VERSION', '$PUBLISHED_VERSION')")
            
            if [ "$IS_NEWER" = "true" ]; then
              echo "New version detected for $PKG_NAME: $CURRENT_VERSION > $PUBLISHED_VERSION"
              echo "true" > needs_publish.txt
              break
            fi
          done < <(lerna list --json | jq -c '.[]')
          
          # Read the result from the temporary file
          NEEDS_PUBLISH=$(cat needs_publish.txt)
          rm needs_publish.txt
          
          echo "needs_publish=$NEEDS_PUBLISH" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.check-versions.outputs.needs_publish == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create GitHub Release
        if: steps.check-versions.outputs.needs_publish == 'true'
        run: |
          VERSION="${{ steps.check-versions.outputs.version }}"
                    
          gh release create "v$VERSION" \
            --title "Version $VERSION" \
            --generate-notes \
            --target ${{ github.sha }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: steps.check-versions.outputs.needs_publish == 'true'
        run: |
          echo "Publishing version ${{ steps.check-versions.outputs.version }} to NPM..."
          lerna publish from-git --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify on skipped publish
        if: steps.check-versions.outputs.needs_publish != 'true'
        run: echo "Skipping publish - no new version detected in lerna.json or all packages are up to date"
